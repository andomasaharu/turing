; turing machine

(let ((left nil)
	  (right nil)
	  (middle nil)
	  (blank #\_)
	  (state nil))
  (defun tape-new(l m r)
	(setf left (if (null l) (cons blank nil) (reverse l)))
	(setf middle m)
	(setf right (if (null r) (cons blank nil) r))
	(format t "tape-new ~A [~A] ~A~%" l m r)
	(tape-inspect)
	(cons left (cons middle right))
	)
  (defun tape-write(c)
	(format t "do tape-write ~A~%" c)
	(setf middle c)
	(tape-inspect)
	)
  (defun move-head-left()
	(format t "do move-head-left~%")
	(setf right (cons middle right))
	(setf middle (if (null left) blank (car left)))
	(setf left (if (null (cdr left)) (cons blank nil) (cdr left)))
	(tape-inspect)
	)
  (defun move-head-right()
	(format t "do move-head-right~%")
	(setf left (cons middle left))
	(setf middle (if (null right) blank (car right)))
	(setf right (if (null (cdr right)) (cons blank nil) (cdr right)))
	(tape-inspect)
	)
  (defun tape-inspect()
	(format t "~{~A ~}[~A]~{ ~A~}~%" (reverse left) middle right)
	)
  (defun set-state(a)
	(setf state a))
  (defclass tmrule () ((state :accessor tmrule-state :initarg :state)
					   (character :accessor tmrule-character :initarg :character)
					   (next_state :accessor tmrule-next_state :initarg :next_state)
					   (write_character :accessor tmrule-write_character :initarg :write_character)
					   (direction :accessor tmrule-direction :initarg :direction)))
  (defmethod tmrule-inspect(rule)
	(format t "state:~A character:~A next_state:~A write_character:~A direction:~A~%" (tmrule-state rule) 'a 'a 'a 'a))
  (defmethod applies_top(configuration)
	(and (eql state (state configuration))
		 (eql middle (character configuration))))
	)

(defun test()
  (setq x (make-instance 'tmrule :state 1 :character 0 :next_state 2 :write_character 1 :direction 'right))
  (tmrule-inspect x)

  (tape-new nil 1 nil)
  (move-head-left)
  (move-head-left)
  (tape-write 1)

  (tape-new nil 0 nil)
  (move-head-left)
  (tape-write 1)
  (move-head-right)
  (tape-write 1)
  (move-head-left)
  (tape-write 0)
  (move-head-left)
  (tape-write 1)

  (tape-new '(1 0 1 1) 1 nil)
  (move-head-left)
  (move-head-right)

  (tape-new nil 0 nil)

  (tape-write 1)

  (tape-write 0)
  (move-head-left)
  (tape-write 1)
  (move-head-right)

  (tape-write 1)

  (tape-write 0)
  (move-head-left)
  (tape-write 0)
  (move-head-left)
  (tape-write 1)
  (move-head-right)
  (move-head-right)
  )
(test)
